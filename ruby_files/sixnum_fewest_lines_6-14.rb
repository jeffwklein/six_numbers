def solve(nums) nums.combination(2).to_a.each { |c| ((c.reverse! if c[1] > c[0]) or true) and nums.each { |x| x != c[0] && x != c[1] and c << x } }.each { |arr| $operators.each { |op| (new_arr = (((op == "-" and arr[0] == arr[1]) or (op == "/" and (arr[0] % arr[1]) > 0) and $steps << "" and [0]) or (new_arr = [] << eval(s = "#{arr[0]} #{op} #{arr[1]}") and arr.drop(2).each { |x| new_arr << x } and $steps << s + " = #{new_arr[0]}" and new_arr)))[0] == $target and (puts $steps or exit) or (new_arr.length > 1 and solve new_arr) or true and $steps.pop } } end
$steps = [] and six_numbers = [] and $operators = ["+", "-", "*", "/"] and (print "Enter target number: " or $target = gets.chomp.to_i) and 6.times { |i| six_numbers << gets.chomp.to_i unless print "Enter number #{i+1}: " } and solve six_numbers
